var search_data = {"index":{"searchIndex":["terminalnotifier","unsupportedplatformerror","available?()","execute()","list()","list()","notify()","notify()","notify_result()","notify_result()","remove()","remove()","version()","readme.markdown"],"longSearchIndex":["terminalnotifier","terminalnotifier::unsupportedplatformerror","terminalnotifier::available?()","terminalnotifier::execute()","terminalnotifier::list()","terminalnotifier#list()","terminalnotifier#notify()","terminalnotifier::notify()","terminalnotifier::notify_result()","terminalnotifier#notify_result()","terminalnotifier#remove()","terminalnotifier::remove()","terminalnotifier::version()",""],"info":[["TerminalNotifier","","TerminalNotifier.html","",""],["TerminalNotifier::UnsupportedPlatformError","","TerminalNotifier/UnsupportedPlatformError.html","",""],["available?","TerminalNotifier","TerminalNotifier.html#method-c-available-3F","()","<p>Returns wether or not the current platform is macOS 10.10, or higher.\n"],["execute","TerminalNotifier","TerminalNotifier.html#method-c-execute","(verbose, options)",""],["list","TerminalNotifier","TerminalNotifier.html#method-c-list","(group = 'ALL', verbose = false)","<p>If a ‘group’ ID is given, and a notification for that group exists, returns\na hash with details about …\n"],["list","TerminalNotifier","TerminalNotifier.html#method-i-list","(group = 'ALL', verbose = false)","<p>If a ‘group’ ID is given, and a notification for that group exists, returns\na hash with details about …\n"],["notify","TerminalNotifier","TerminalNotifier.html#method-i-notify","(message, options = {}, verbose = false, always_string = false)","<p>Sends a User Notification and returns whether or not it was a success.\n<p>The available options are `:title`, …\n"],["notify","TerminalNotifier","TerminalNotifier.html#method-c-notify","(message, options = {}, verbose = false, always_string = false)","<p>Sends a User Notification and returns whether or not it was a success.\n<p>The available options are `:title`, …\n"],["notify_result","TerminalNotifier","TerminalNotifier.html#method-c-notify_result","(result, options, always_string = false)","<p>Cleans up the result of a notification, making it easier to work it\n<p>The result of a notification is downcased, …\n"],["notify_result","TerminalNotifier","TerminalNotifier.html#method-i-notify_result","(result, options, always_string = false)","<p>Cleans up the result of a notification, making it easier to work it\n<p>The result of a notification is downcased, …\n"],["remove","TerminalNotifier","TerminalNotifier.html#method-i-remove","(group = 'ALL', verbose = false)","<p>Removes a notification that was previously sent with the specified ‘group’\nID, if one exists.\n<p>If no ‘group’ …\n"],["remove","TerminalNotifier","TerminalNotifier.html#method-c-remove","(group = 'ALL', verbose = false)","<p>Removes a notification that was previously sent with the specified ‘group’\nID, if one exists.\n<p>If no ‘group’ …\n"],["version","TerminalNotifier","TerminalNotifier.html#method-c-version","()",""],["README.markdown","","README_markdown.html","","<p>TerminalNotifier\n<p>A simple Ruby wrapper around the terminal-notifier command-line\ntool, which\nallows you ...\n"]]}}