#!groovy

def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)).com.evernym.pipeline

logger = evLibrary.Logger.new(this)
notifier = evLibrary.Notifier.new(this)
logger.setGlobalLevel('TRACE')

pipelineWrapper({
    nodeWrapper {

        List osnames = ['xenial']
        List projects = ['sovtoken', 'sovtokenfees']
        List goals = ['test']

        stage('Checkout from SCM') {
            checkout scm
        }

        def utils = evLibrary.Utils.new(this)
        def buildCtx = evLibrary.AwsCodeBuildHelper.BuildCtx.new('plugin',
            ['devops', 'sovtoken/sovtoken/__metadata__.py', 'sovtokenfees/sovtokenfees/__metadata__.py'])
        def awsCBHelper = evLibrary.AwsCodeBuildHelper.new(this, buildCtx)

        stage('Upload source to S3') {
            awsCBHelper.uploadSourceToS3()
        }

        Map builds = projects.collectEntries { proj ->
            osnames.collectEntries { osname ->
                ["$osname:$proj": {
                    def ciImageTag
                    def prTag = "ci-$osname-$proj"

                    stage("$osname:$proj: Resolve image tag") {
                        def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
                        ciImageTag = "$_imgVersion-$osname-$proj-ci"
                        logger.info("CI docker image tag: $ciImageTag")
                    }

                    awsCBHelper.build() {
                        projectTag = prTag

                        // build spec for env image
                        envBuildSrc = ['devops', "${proj}/${proj}/__metadata__.py"] // TODO make more accurate
                        envBuildCmds = [
                            'export PROJECT_DIR=$PWD',
                            'make -C devops image_ci'
                        ]
                        envBuildEnvv = [
                            [name: 'OSNAME', value: osname],
                            [name: 'SRC_DIR_NAME', value: proj],
                            [name: 'DOCKER_NAME', value: awsCBHelper.buildCtx.projectName],
                            [name: 'DOCKER_TAG', value: ciImageTag],
                        ]

                        // env and build spec
                        imageTag = ciImageTag
                        buildspec = 'devops/aws-codebuild/buildspec.yml'
                        envv = [
                            [name: 'OSNAME', value: osname],
                            [name: 'MAKE_GOALS', value: goals.join(' ')],
                            [name: 'SRC_DIR_NAME', value: proj],
                            [name: 'PYTEST_ARGS', value: "-l --junit-xml=/tmp/artifacts/logs/test.${proj}.xml"],
                        ]

                        onArtifacts = {
                            this.stage("$osname:$proj: Archive artifacts") {
                                utils.archiveArtifacts("logs/*.out*") {
                                    truncate = true
                                    allowEmptyArchive = true
                                }

                                this.junit "logs/test.${proj}.xml"
                            }
                        }
                    }
                }]
            }
        }

        stage("Build and test") {
            builds.failFast = false
            utils.parallel builds
        }
    }
}, { err ->
    if (err) {
        logger.error("Pipeline failed with the error $err")
    }

    stage("Build result notification") {
        notifier.email()
    }
})
